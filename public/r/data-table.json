{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A data table component with sorting and filtering.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "files": [
    {
      "path": "registry/new-york/data-table/data-table.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  IconChevronDown,\r\n  IconChevronLeft,\r\n  IconChevronRight,\r\n  IconChevronsLeft,\r\n  IconChevronsRight,\r\n  IconCircleCheckFilled,\r\n  IconLoader,\r\n} from \"@tabler/icons-react\"\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  SortingState,\r\n  useReactTable,\r\n  VisibilityState,\r\n} from \"@tanstack/react-table\"\r\nimport { z } from \"zod\"\r\n\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\"\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\n\r\nexport const schema = z.object({\r\n  id: z.number(),\r\n  header: z.string(),\r\n  type: z.string(),\r\n  status: z.string(),\r\n  target: z.string(),\r\n  limit: z.string(),\r\n  reviewer: z.string(),\r\n})\r\n\r\nconst columns: ColumnDef<z.infer<typeof schema>>[] = [\r\n  {\r\n    id: \"select\",\r\n    header: ({ table }) => (\r\n      <div className=\"flex items-center justify-center\">\r\n        <Checkbox\r\n          checked={\r\n            table.getIsAllPageRowsSelected() ||\r\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n          }\r\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n          aria-label=\"Select all\"\r\n        />\r\n      </div>\r\n    ),\r\n    cell: ({ row }) => (\r\n      <div className=\"flex items-center justify-center\">\r\n        <Checkbox\r\n          checked={row.getIsSelected()}\r\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n          aria-label=\"Select row\"\r\n        />\r\n      </div>\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  },\r\n  {\r\n    accessorKey: \"header\",\r\n    header: \"Header\",\r\n    cell: ({ row }) => {\r\n      return <div className=\"font-medium\">{row.original.header}</div>\r\n    },\r\n    enableHiding: false,\r\n  },\r\n  {\r\n    accessorKey: \"type\",\r\n    header: \"Section Type\",\r\n    cell: ({ row }) => (\r\n      <div className=\"w-32\">\r\n        <Badge variant=\"outline\" className=\"text-muted-foreground px-1.5\">\r\n          {row.original.type}\r\n        </Badge>\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    accessorKey: \"status\",\r\n    header: \"Status\",\r\n    cell: ({ row }) => (\r\n      <Badge variant=\"outline\" className=\"text-muted-foreground px-1.5\">\r\n        {row.original.status === \"Done\" ? (\r\n          <IconCircleCheckFilled className=\"fill-green-500 dark:fill-green-400\" />\r\n        ) : (\r\n          <IconLoader />\r\n        )}\r\n        {row.original.status}\r\n      </Badge>\r\n    ),\r\n  },\r\n  {\r\n    accessorKey: \"target\",\r\n    header: \"Target\",\r\n    cell: ({ row }) => <div>{row.original.target}</div>,\r\n  },\r\n  {\r\n    accessorKey: \"limit\",\r\n    header: \"Limit\",\r\n    cell: ({ row }) => <div>{row.original.limit}</div>,\r\n  },\r\n  {\r\n    accessorKey: \"reviewer\",\r\n    header: \"Reviewer\",\r\n    cell: ({ row }) => <div>{row.original.reviewer}</div>,\r\n  },\r\n]\r\n\r\nexport function DataTable({\r\n  data: initialData,\r\n}: {\r\n  data: z.infer<typeof schema>[]\r\n}) {\r\n  const [data, setData] = React.useState(initialData)\r\n  const [sorting, setSorting] = React.useState<SortingState>([])\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n    []\r\n  )\r\n  const [columnVisibility, setColumnVisibility] =\r\n    React.useState<VisibilityState>({})\r\n  const [rowSelection, setRowSelection] = React.useState({})\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"flex items-center py-4\">\r\n        <Input\r\n          placeholder=\"Filter headers...\"\r\n          value={(table.getColumn(\"header\")?.getFilterValue() as string) ?? \"\"}\r\n          onChange={(event) =>\r\n            table.getColumn(\"header\")?.setFilterValue(event.target.value)\r\n          }\r\n          className=\"max-w-sm\"\r\n        />\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\" className=\"ml-auto\">\r\n              Columns <IconChevronDown className=\"ml-2 h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\">\r\n            {table\r\n              .getAllColumns()\r\n              .filter((column) => column.getCanHide())\r\n              .map((column) => {\r\n                return (\r\n                  <DropdownMenuCheckboxItem\r\n                    key={column.id}\r\n                    className=\"capitalize\"\r\n                    checked={column.getIsVisible()}\r\n                    onCheckedChange={(value) =>\r\n                      column.toggleVisibility(!!value)\r\n                    }\r\n                  >\r\n                    {column.id}\r\n                  </DropdownMenuCheckboxItem>\r\n                )\r\n              })}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <div className=\"rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead key={header.id}>\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                          )}\r\n                    </TableHead>\r\n                  )\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  data-state={row.getIsSelected() && \"selected\"}\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className=\"h-24 text-center\"\r\n                >\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n        <div className=\"flex-1 text-sm text-muted-foreground\">\r\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\r\n          {table.getFilteredRowModel().rows.length} row(s) selected.\r\n        </div>\r\n        <div className=\"space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n} ",
      "type": "registry:component"
    }
  ]
}